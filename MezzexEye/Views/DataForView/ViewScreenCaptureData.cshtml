@model MezzexEye.Models.PaginatedScreenCaptureDataViewModel

@{
    ViewData["Title"] = "Screen Capture Data";
    var today = DateTime.Today.ToString("yyyy-MM-dd");
    var selectedDate = ViewBag.SelectedDate as string ?? today; // Use the selected date or today's date if none is selected.
    var isAdministrator = User.IsInRole("Administrator");
}

<h1 class="mb-4 text-center">Screen Capture Data</h1>

<div class="mb-4 text-center">
    <form id="filterForm" method="get" class="d-flex justify-content-center align-items-center flex-wrap">
        @if (isAdministrator)
        {
            <div class="me-2 mt-3">
                <label for="username" class="form-label me-2">Username:</label>
                <select id="username" name="username" class="form-select">
                    <option value="">All</option>
                    @foreach (var user in ViewBag.Usernames as List<string>)
                    {
                        <option value="@user">@user</option>
                    }
                </select>
            </div>
        }
        else
        {
            <div class="me-2 mt-3">
                <label for="username" class="form-label me-2">Username:</label>
                <select id="username" name="username" class="form-select">
                    @foreach (var user in ViewBag.Usernames as List<string>)
                    {
                        <option value="@user">@user</option>
                    }
                </select>
            </div>
            <input type="hidden" name="username" value="@User.Identity.Name" />
        }

        <div class="me-2 mt-3">
            <label for="date" class="form-label me-2">Date:</label>
            <input type="date" id="date" name="date" class="form-control" value="@selectedDate">
        </div>

        <div class="me-2 mt-3">
            <label for="taskName" class="form-label me-2">Task Name:</label>
            <select id="taskName" name="taskName" class="form-select">
                <option value="">All Tasks</option>
                @foreach (var task in ViewBag.TaskNames as List<string>)
                {
                    @if (ViewBag.SelectedTaskName == task)
                    {
                        <option value="@task" selected>@task</option>
                    }
                    else
                    {
                        <option value="@task">@task</option>
                    }
                }
            </select>
        </div>

        <div class="me-2 mt-3" style="display: none;">
            <label for="mediaType" class="form-label me-2">Media Type:</label>
            <select id="mediaType" name="mediaType" class="form-select">
                <option value="image" selected>Image</option>
            </select>
        </div>

        <div class="me-2 mt-5">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </form>
</div>

<div id="screenCaptureData">
    @await Html.PartialAsync("_ScreenCaptureData", Model)
</div>

<!-- Image and Video Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <h5 class="modal-title me-3" id="imageModalLabel">Media</h5>
                    <div id="modalDetails" class="d-flex">
                        <p class="me-3"><strong>User:</strong> <span id="modalUsername"></span></p>
                        <p class="me-3"><strong>Created Time:</strong> <span id="modalTimestamp"></span></p>
                        <p class="me-3"><strong>Task Name:</strong> <span id="modalTaskName"></span></p>
                        <p><strong>Task Comment:</strong> <span id="modalComment"></span></p>
                    </div>
                </div>
                <div class="d-flex align-items-center ms-3">
                    <button id="pauseButton" class="btn btn-warning me-3 ms-3" style="display: none;">Pause</button>
                    <button id="resumeButton" class="btn btn-success me-3" style="display: none;">Resume</button>
                    <div class="form-check form-switch">
                        <input class="form-check-input me-3" type="checkbox" id="autoScrollToggle">
                        <label class="form-check-label me-3" for="autoScrollToggle">Auto Scroll</label>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center position-relative">
                <button type="button" class="btn btn-secondary position-absolute start-0 top-50 translate-middle-y" id="prevImage">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <img src="" alt="Full Screenshot" class="img-fluid" id="modalImage" style="display:none;">
                <video src="" class="img-fluid" id="modalVideo" controls style="display:none;"></video>
                <button type="button" class="btn btn-secondary position-absolute end-0 top-50 translate-middle-y" id="nextImage">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        attachPaginationEvents();
        attachModalEvents();
    });

    function attachPaginationEvents() {
        document.querySelectorAll('.pagination a[data-page]').forEach(link => {
            link.addEventListener('click', function (event) {
                event.preventDefault();
                const page = this.getAttribute('data-page');
                loadPage(page);
            });
        });

        document.getElementById('prevPage').addEventListener('click', function (event) {
            event.preventDefault();
            const currentPage = parseInt(document.querySelector('.pagination .active a').getAttribute('data-page'));
            if (currentPage > 1) {
                loadPage(currentPage - 1);
            }
        });

        document.getElementById('nextPage').addEventListener('click', function (event) {
            event.preventDefault();
            const currentPage = parseInt(document.querySelector('.pagination .active a').getAttribute('data-page'));
            const totalPages = @Model.TotalPages;
            if (currentPage < totalPages) {
                loadPage(currentPage + 1);
            }
        });
    }

    function attachModalEvents() {
        var imageModal = document.getElementById('imageModal');
        var allMedia = [];
        var currentIndex = 0;
        var autoScrollInterval = null;
        var isAutoScrollEnabled = false;
        var currentPage = 1; // Initialize the current page
        var totalPages = @Model.TotalPages;

        function updateModalDetails(mediaUrl, mediaType) {
            var currentMediaElement = document.querySelector(`[data-bs-${mediaType.toLowerCase()}="${mediaUrl}"]`);
            var username = currentMediaElement.getAttribute('data-bs-username');
            var timestamp = currentMediaElement.getAttribute('data-bs-timestamp');
            var taskName = currentMediaElement.getAttribute('data-bs-taskname') || "Task Not Started";
            var taskComment = currentMediaElement.getAttribute('data-bs-comment');

            document.getElementById('modalUsername').textContent = username;
            document.getElementById('modalTimestamp').textContent = timestamp;
            document.getElementById('modalTaskName').textContent = taskName && taskName.trim() !== "" ? taskName : "No Running Task";
            document.getElementById('modalComment').textContent = taskComment && taskComment.trim() !== "" ? taskComment : "No comment available";
        }

        function showMediaAtIndex(index) {
            var newMediaUrl = allMedia[index];
            var mediaType = document.querySelector(`[data-bs-img="${newMediaUrl}"]`) ? 'img' : 'video';
            var modalImage = document.getElementById('modalImage');
            var modalVideo = document.getElementById('modalVideo');

            if (mediaType === 'img') {
                modalImage.src = newMediaUrl;
                modalImage.style.display = 'block';
                modalVideo.style.display = 'none';
            } else {
                modalVideo.src = newMediaUrl;
                modalVideo.style.display = 'block';
                modalVideo.load();
                modalImage.style.display = 'none';
            }
            updateModalDetails(newMediaUrl, mediaType);
        }

        function startAutoScroll() {
            isAutoScrollEnabled = true;
            autoScrollInterval = setInterval(function () {
                currentIndex++;
                if (currentIndex >= allMedia.length) {
                    if (currentPage < totalPages) {
                        currentIndex = 0;
                        loadPage(currentPage + 1, true); // Load next page if needed
                    } else {
                        stopAutoScroll();
                        document.getElementById('resumeButton').style.display = 'inline-block';
                    }
                } else {
                    showMediaAtIndex(currentIndex);
                }
            }, 2000); // Auto-scroll every 2 seconds

            document.getElementById('pauseButton').style.display = 'inline-block';
            document.getElementById('resumeButton').style.display = 'none';
        }

        function stopAutoScroll() {
            isAutoScrollEnabled = false;
            clearInterval(autoScrollInterval);

            document.getElementById('pauseButton').style.display = 'none';
            document.getElementById('resumeButton').style.display = 'inline-block';
        }

        document.getElementById('autoScrollToggle').addEventListener('change', function () {
            if (this.checked) {
                startAutoScroll();
            } else {
                stopAutoScroll();
            }
        });

        document.getElementById('pauseButton').addEventListener('click', stopAutoScroll);
        document.getElementById('resumeButton').addEventListener('click', startAutoScroll);

        imageModal.addEventListener('show.bs.modal', function (event) {
            allMedia = Array.from(document.querySelectorAll('[data-bs-img], [data-bs-video]'))
                .map(el => el.getAttribute(`data-bs-${el.hasAttribute('data-bs-img') ? 'img' : 'video'}`));
            var button = event.relatedTarget;
            currentIndex = allMedia.indexOf(button.getAttribute(`data-bs-${button.hasAttribute('data-bs-img') ? 'img' : 'video'}`));
            showMediaAtIndex(currentIndex);
        });

        document.getElementById('nextImage').addEventListener('click', function () {
            currentIndex++;
            if (currentIndex >= allMedia.length) {
                if (currentPage < totalPages) {
                    currentIndex = 0;
                    loadPage(currentPage + 1, true); // Load next page if needed
                } else {
                    currentIndex = 0;
                    showMediaAtIndex(currentIndex);
                }
            } else {
                showMediaAtIndex(currentIndex);
            }
        });

        document.getElementById('prevImage').addEventListener('click', function () {
            currentIndex--;
            if (currentIndex < 0) {
                if (currentPage > 1) {
                    currentPage--;
                    loadPage(currentPage, true); // Load previous page if needed
                } else {
                    currentIndex = allMedia.length - 1;
                    showMediaAtIndex(currentIndex);
                }
            } else {
                showMediaAtIndex(currentIndex);
            }
        });
    }

    function loadPage(page, isAutoScroll = false) {
        const url = new URL(window.location.href);
        url.searchParams.set('page', page);

        fetch(url, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => response.text())
            .then(html => {
                document.getElementById('screenCaptureData').innerHTML = html;
                attachPaginationEvents(); // Reattach events to the new pagination
                attachModalEvents(); // Reattach events to new media elements

                currentPage = page; // Update current page

                if (isAutoScroll && isAutoScrollEnabled) {
                    allMedia = Array.from(document.querySelectorAll('[data-bs-img], [data-bs-video]'))
                        .map(el => el.getAttribute(`data-bs-${el.hasAttribute('data-bs-img') ? 'img' : 'video'}`));
                    if (currentIndex < allMedia.length) {
                        showMediaAtIndex(currentIndex);
                    } else {
                        stopAutoScroll();
                    }
                }
            })
            .catch(error => console.error('Error loading page:', error));
    }
</script>


<style>
    .modal-lg {
        max-width: 90%;
    }

    #modalDetails p {
        margin: 0;
    }

    .modal-body {
        max-height: 80vh;
        overflow-y: auto;
    }

    .position-absolute {
        z-index: 2;
    }

    .btn-secondary {
        background-color: rgba(0, 0, 0, 0.5);
        border: none;
    }

        .btn-secondary i {
            color: white;
        }

    #filterForm label {
        margin-bottom: 0;
    }

    #filterForm {
        gap: 1rem;
    }

        #filterForm .form-label {
            margin-bottom: 0.5rem;
        }

        #filterForm .form-select,
        #filterForm .form-control,
        #filterForm .btn {
            margin-bottom: 0;
        }

    #modalDetails p {
        margin: 0.5rem 0;
    }
</style>
