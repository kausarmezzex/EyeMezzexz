@model EyeMezzexz.Models.UserTaskAssignmentViewModel
<style>
    /* Ensure that each row of computers is flexbox-based and evenly spaced */
    .computer-row {
        display: flex;
        flex-wrap: wrap;
        gap: 10px; /* Reduces space between items */
        justify-content: flex-start; /* Align items to the start of the row */
    }

        .computer-row .computer-item {
            flex: 1 1 calc(50% - 10px); /* Two items per row, minus the gap */
            box-sizing: border-box; /* Ensure padding and borders are included in the element's width */
        }
</style>
<h2>Task Assignment</h2>

<!-- User Search and Country Dropdown -->
<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" class="form-control" id="userSearch" placeholder="Search user..." aria-label="Search user">
    </div>
    <div class="col-md-6">
        <select class="form-select" id="countrySelect" name="country">
            @if (Model.CurrentCountry == "India")
            {
                <option value="India" selected="selected">India</option>
            }
            else
            {
                <option value="India">India</option>
            }

            @if (Model.CurrentCountry == "United Kingdom")
            {
                <option value="UK" selected="selected">UK</option>
            }
            else
            {
                <option value="UK">UK</option>
            }
        </select>
    </div>

</div>

<form asp-action="AssignTasks" method="post" id="taskAssignmentForm">
    @Html.AntiForgeryToken()

    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>User</th>
                <th>Task Assignment</th>
                <th class="uk-only">Select Computer</th> <!-- UK-only column -->
                <th>Assigned Tasks</th>
            </tr>
        </thead>
        <tbody id="userTableBody">
            @for (int i = 0; i < Model.Users.Count; i++)
            {
                <tr class="user-row">
                    <td>
                        @Model.Users[i].FirstName @Model.Users[i].LastName
                        <input type="hidden" name="UserTaskAssignments[@i].UserId" value="@Model.Users[i].Id" />
                        <input type="hidden" name="UserTaskAssignments[@i].Country" value="India" id="countryInput-@i" />
                    </td>
                    <td>
                        <!-- Task Selection Dropdown -->
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="taskDropdownButton-@i" data-bs-toggle="dropdown" aria-expanded="false">
                                Select Tasks
                            </button>

                            <div class="dropdown-menu p-2" aria-labelledby="taskDropdownButton-@i" style="max-height: 300px; overflow-y: auto;">
                                <input type="text" class="form-control mb-2 task-search" id="taskSearch-@i" placeholder="Search tasks..." aria-label="Search tasks">
                                <ul class="list-unstyled task-list">
                                    @foreach (var task in Model.AvailableTasks)
                                    {
                                        <li>
                                            <label class="dropdown-item">
                                                <input type="checkbox" class="task-checkbox" data-user-index="@i" value="@task.Id" />
                                                @task.Name
                                            </label>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                        <small class="text-muted mt-2" id="task-count-@i">0 tasks assigned</small>
                    </td>

                    <td class="uk-only">
                        <!-- Computer Selection Dropdown -->
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="computerDropdownButton-@i" data-bs-toggle="dropdown" aria-expanded="false">
                                Select Computers
                            </button>

                            <div class="dropdown-menu p-2" aria-labelledby="computerDropdownButton-@i" style="max-height: 300px; overflow-y: auto;">
                                <ul class="list-unstyled computer-list">
                                    @foreach (var computer in Model.Computers)
                                    {
                                        <li>
                                            <label class="dropdown-item">
                                                <input type="checkbox" class="computer-checkbox" data-user-index="@i" value="@computer.Id" />
                                                @computer.Name
                                            </label>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                        <!-- Selected Computers Display for UK users -->
                        <div class="col-md-12" id="computerSelectionDisplay-@i" style="display:none;">
                            <div id="selectedComputersList-@i"></div>
                        </div>
                    </td>

                    <td>
                        <div class="selected-tasks">
                            <ul id="task-list-@i" class="list-group"></ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button type="submit" class="btn btn-success">Assign Tasks</button>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const updateTaskCount = (userIndex) => {
            const taskList = document.getElementById(`task-list-${userIndex}`);
            const taskCount = document.getElementById(`task-count-${userIndex}`);
            taskCount.textContent = `${taskList.children.length} tasks assigned`;
        };
        document.getElementById('countrySelect').addEventListener('change', function () {
            let selectedCountry = this.value;

            // Map "UK" to "United Kingdom" before sending it to the backend
            if (selectedCountry === "UK") {
                selectedCountry = "United Kingdom";
            }

            // Reload the page with the mapped country value as a query parameter
            window.location.href = `@Url.Action("Index")?country=${selectedCountry}`;
        });

        const createTaskItem = (taskId, taskName, userIndex, taskIndex, computers) => {
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item';
            listItem.innerHTML = `
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="task-name">${taskName}</span>
                                    <div class="d-flex align-items-center">
                                        <input type="hidden" name="UserTaskAssignments[${userIndex}].TaskAssignments[${taskIndex}].TaskId" value="${taskId}" />
                                        <input type="hidden" name="UserTaskAssignments[${userIndex}].TaskAssignments[${taskIndex}].Country" value="${countrySelect.value}" />
                                        ${computers.map(computer => `<input type="hidden" name="UserTaskAssignments[${userIndex}].TaskAssignments[${taskIndex}].ComputerIds[]" value="${computer.id}" />`).join('')}
                                        <input type="number" name="UserTaskAssignments[${userIndex}].TaskAssignments[${taskIndex}].AssignedDurationHours" class="form-control form-control-sm me-2" min="1" style="width: 100px;" placeholder="Time (hrs)" />
                                        <input type="number" name="UserTaskAssignments[${userIndex}].TaskAssignments[${taskIndex}].TargetQuantity" class="form-control form-control-sm me-2" style="width: 100px;" placeholder="Quantity" />
                                        <button type="button" class="btn btn-danger btn-sm remove-task-btn">Remove</button>
                                    </div>
                                </div>`;
            return listItem;
        };
        // User Search Logic
        const userSearch = document.getElementById('userSearch');
        userSearch.addEventListener('input', function () {
            const searchValue = this.value.toLowerCase();
            document.querySelectorAll('.user-row').forEach(row => {
                const userName = row.querySelector('td').textContent.toLowerCase();
                row.style.display = userName.includes(searchValue) ? '' : 'none';
            });
        });
        const selectedComputers = {};
        const assignedTaskCount = {};

        const updateSelectedComputers = (userIndex) => {
            const computerCheckboxes = document.querySelectorAll(`.computer-checkbox[data-user-index="${userIndex}"]`);
            selectedComputers[userIndex] = [];

            computerCheckboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    selectedComputers[userIndex].push({
                        id: checkbox.value,
                        name: checkbox.parentElement.textContent.trim()
                    });
                }
            });

            const computerSelectionDisplay = document.getElementById(`computerSelectionDisplay-${userIndex}`);
            const selectedComputersList = document.getElementById(`selectedComputersList-${userIndex}`);
            selectedComputersList.innerHTML = ''; // Clear previous selections

            // Display or hide the selected computers section
            if (selectedComputers[userIndex].length > 0) {
                computerSelectionDisplay.style.display = 'block';
            } else {
                computerSelectionDisplay.style.display = 'none';
            }

            // Render each selected computer in the list, ensuring 2 per line
            let rowDiv = null; // Variable to hold the current row div
            selectedComputers[userIndex].forEach((computer, index) => {
                if (index % 2 === 0) {
                    // Start a new row after every 2 computers
                    rowDiv = document.createElement('div');
                    rowDiv.classList.add('computer-row'); // Row with margin
                    selectedComputersList.appendChild(rowDiv);
                }

                const computerDiv = document.createElement('div');
                computerDiv.className = 'd-inline-block w-auto me-1 ';
                computerDiv.textContent = computer.name;

                rowDiv.appendChild(computerDiv); // Append to the current row
            });

            // Update the hidden inputs for selected computers in the task list
            const taskList = document.getElementById(`task-list-${userIndex}`);
            taskList.querySelectorAll('.list-group-item').forEach((taskItem, taskIndex) => {
                // Remove previous computer input elements
                taskItem.querySelectorAll('input[name^="UserTaskAssignments"]').forEach(input => {
                    if (input.name.includes('.ComputerIds')) {
                        input.remove();
                    }
                });

                // Add new hidden input for each selected computer
                selectedComputers[userIndex].forEach(computer => {
                    const computerInput = document.createElement('input');
                    computerInput.type = 'hidden';
                    computerInput.name = `UserTaskAssignments[${userIndex}].TaskAssignments[${taskIndex}].ComputerIds[]`;
                    computerInput.value = computer.id;
                    taskItem.appendChild(computerInput);
                });
            });
        };


        document.querySelectorAll('.computer-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const userIndex = checkbox.getAttribute('data-user-index');
                updateSelectedComputers(userIndex);
            });
        });

        document.querySelectorAll('.task-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const userIndex = checkbox.getAttribute('data-user-index');
                const taskList = document.getElementById(`task-list-${userIndex}`);
                const taskId = checkbox.value;
                const taskName = checkbox.parentElement.textContent.trim();

                if (!assignedTaskCount[userIndex]) {
                    assignedTaskCount[userIndex] = 0;
                }

                const taskIndex = assignedTaskCount[userIndex];

                if (checkbox.checked) {
                    if (!taskList.querySelector(`input[value="${taskId}"]`)) {
                        const listItem = createTaskItem(taskId, taskName, userIndex, taskIndex, selectedComputers[userIndex] || []);
                        taskList.appendChild(listItem);
                        assignedTaskCount[userIndex]++;

                        updateTaskCount(userIndex);

                        listItem.querySelector('.remove-task-btn').addEventListener('click', () => {
                            taskList.removeChild(listItem);
                            updateTaskCount(userIndex);
                            assignedTaskCount[userIndex]--;
                        });
                    } else {
                        alert(`Task "${taskName}" is already added.`);
                    }
                } else {
                    const taskToRemove = taskList.querySelector(`input[value="${taskId}"]`);
                    if (taskToRemove) {
                        taskList.removeChild(taskToRemove.closest('li'));
                        updateTaskCount(userIndex);
                        assignedTaskCount[userIndex]--;
                    }
                }
            });
        });

        const countrySelect = document.getElementById('countrySelect');
        const toggleComputerSelect = () => {
            const selectedCountry = countrySelect.value;
            document.querySelectorAll('.uk-only').forEach(column => {
                column.style.display = (selectedCountry === 'UK') ? '' : 'none';
            });
        };

        toggleComputerSelect();

        countrySelect.addEventListener('change', function () {
            toggleComputerSelect();
            document.querySelectorAll('input[id^="countryInput-"]').forEach(countryInput => {
                countryInput.value = countrySelect.value;
            });

            document.querySelectorAll('.list-group-item').forEach(listItem => {
                const countryInputs = listItem.querySelectorAll('input[name$=".Country"]');
                countryInputs.forEach(input => {
                    input.value = countrySelect.value;
                });
            });
        });
    });
    document.querySelector("#taskAssignmentForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const formData = new FormData(this);

        try {
            const response = await fetch(this.action, {
                method: "POST",
                body: formData,
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "X-CSRF-TOKEN": formData.get("__RequestVerificationToken")
                }
            });

            if (response.ok) {
                alert("Tasks assigned successfully!");
            } else if (response.status === 409) {
                const errorData = await response.json();
                alert(errorData.message); // Display the conflict message from the server
            } else {
                alert("An error occurred.");
            }
        } catch (error) {
            console.error("Error assigning tasks:", error);
            alert("An error occurred during task assignment.");
        }
    });

</script>
